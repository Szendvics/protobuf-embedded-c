package edu.tum.cs.ccts.protobuf.embedded

import java.io.File
import org.antlr.runtime.tree.CommonTree
import java.io.FileWriter
import java.util.HashSet
import java.util.List

class EmbeddedCGenerator {
	
	def doGenerate(File outputDirectory, String name, CommonTree tree) {
		generateFile(new File(outputDirectory, name + ".h"), tree.compileHeader(name))
		generateFile(new File(outputDirectory, name + ".c"), tree.compileImplementation(name))
	}

	
	def compileHeader(CommonTree tree, String name) '''
		/******************************************************************* 
		 * Header file generated by Protoc for Embedded C.                 *
		 * Version «Protoc::VERSION»                                      *
		 *                                                                 *
		 * Copyright (c) 2009-2013                                         *
		 * Technische Universitaet Muenchen                                *
		 * http://www4.in.tum.de/                                          *
		 *                                                                 *
		 * Source : «name».proto
		 *                                                                 *
		 * Do not edit.                                                    *
		 *******************************************************************/

		#ifndef _«name»_H
		#define _«name»_H
		
		#ifdef __cplusplus
		  extern "C" {
		#endif
		
		«FOR i : tree.includes»
			#include «i»
		«ENDFOR»
		
		// ... some examples for accessing nodes in a CommonTree
		
		// ... iterate over all children (and list their respective children) 
		«FOR c : tree.children as List<CommonTree>»
			«c.text» «c.childText(".")»
		«ENDFOR»
		
		// ... access child node with a certain token type (e.g. PACKAGE)
		«tree.getFirstChildWithType(ProtoParser::PACKAGE)»
		
		// all options
		«FOR t : tree.childTrees.filter[it.type == ProtoParser::OPTION]»
			«t.childText(" ")»
		«ENDFOR»
	'''
	
	
	def String childText(CommonTree tree, String separator) {
		if (tree.childTrees == null)
			return tree.text
		tree.childTrees.map[it.childText("")].reduce(a, b | a + separator + b)
	}
	
	def childTrees(CommonTree tree) {
		tree.children as List<CommonTree>
	}




	def CharSequence compileImplementation(CommonTree tree, String name) '''
		/******************************************************************* 
		 * C file generated by Protoc for Embedded C.                      *
		 * Version «Protoc::VERSION»                                      *
		 *                                                                 *
		 * Copyright (c) 2009-2013                                         *
		 * Technische Universitaet Muenchen                                *
		 * http://www4.in.tum.de/                                          *
		 *                                                                 *
		 * Source : «name».proto
		 *                                                                 *
		 * Do not edit.                                                    *
		 *******************************************************************/
		 
		#include "«name».h"
		«FOR i : includes(tree)»
			#include «i»
		«ENDFOR»
	'''
	
	/**
	 * Creates the given file and writes the given contents to it.
	 */
	def generateFile(File file, CharSequence contents) {
		val writer = new FileWriter(file, false)
		writer.write(contents.toString)
		writer.close
	}
	
	/**
	 * Collects a set of necessary includes for this AST tree.
	 */
	def includes(CommonTree tree) {
		val imports = new HashSet<String>()
		// ... remove following 2 lines of test code and implement!
		imports += "api1.h"
		imports += "api2.h"
		return imports
	}
	 
	
}